import celery
from caravel import db, models, app
import json
from sqlalchemy import select, text
from sqlalchemy.sql.expression import TextAsFrom
import pandas as pd

celery_app = celery.Celery(config_source=app.config.get('CELERY_CONFIG'))


@celery_app.task
def get_sql_results(database_id, sql):
    session = db.session()
    mydb = session.query(models.Database).filter_by(id=database_id).first()
    return get_sql_results_internal(sql, session, mydb)


# TODO(b.kyryliuk): merge the changes made in the carapal first
#                   before merging this PR.
def get_sql_results_internal(sql, session, mydb):
    """Get the SQL query resulst from the give session and db connection.

    Attributes:
      sql (string): SQL query that will be executed
      session (caravel.db.session()): DB session
      mydb (sqlalchemy.orm.query.Query): source of all SELECT statements
            generated by the ORM
    Returns:
      string: table in the html format.
    """
    content = ""
    eng = mydb.get_sqla_engine()
    if mydb:
        if app.config.get('SQL_MAX_ROW'):
            sql = sql.strip().strip(';')
            qry = (
                select('*')
                .select_from(TextAsFrom(text(sql), ['*']).alias('inner_qry'))
                .limit(app.config.get('SQL_MAX_ROW'))
            )
            sql = str(qry.compile(eng, compile_kwargs={"literal_binds": True}))
        try:
            df = pd.read_sql_query(sql=sql, con=eng)
            # TODO(b.kyryliuk): refactore the output to be json instead of html
            data = {
                'columns': [c for c in df.columns],
                'data': df.to_dict(orient='records'),
            }
            return json.dumps(data, allow_nan=False)
        except Exception as e:
            content = json.dumps({'msg': e.message})
    session.commit()

    return content
