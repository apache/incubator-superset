#!/usr/bin/env python
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import logging
import celery
from celery.bin import worker as celery_worker
from datetime import datetime
from subprocess import Popen
from collections import defaultdict

from flask_migrate import MigrateCommand
from flask_script import Manager

import caravel
from caravel import app, ascii_art, db, data, utils

config = app.config

manager = Manager(app)
manager.add_command('db', MigrateCommand)


@manager.option(
    '-d', '--debug', action='store_true',
    help="Start the web server in debug mode")
@manager.option(
    '-a', '--address', default=config.get("CARAVEL_WEBSERVER_ADDRESS"),
    help="Specify the address to which to bind the web server")
@manager.option(
    '-p', '--port', default=config.get("CARAVEL_WEBSERVER_PORT"),
    help="Specify the port on which to run the web server")
@manager.option(
    '-w', '--workers', default=config.get("CARAVEL_WORKERS", 2),
    help="Number of gunicorn web server workers to fire up")
@manager.option(
    '-t', '--timeout', default=config.get("CARAVEL_WEBSERVER_TIMEOUT"),
    help="Specify the timeout (seconds) for the gunicorn web server")
def runserver(debug, address, port, timeout, workers):
    """Starts a Caravel web server"""
    debug = debug or config.get("DEBUG")
    if debug:
        app.run(
            host='0.0.0.0',
            port=int(port),
            threaded=True,
            debug=True)
    else:
        cmd = (
            "gunicorn "
            "-w {workers} "
            "--timeout {timeout} "
            "-b {address}:{port} "
            "--limit-request-line 0 "
            "--limit-request-field_size 0 "
            "caravel:app").format(**locals())
        print("Starting server with command: " + cmd)
        Popen(cmd, shell=True).wait()

@manager.command
def init():
    """Inits the Caravel application"""
    utils.init(caravel)

@manager.option(
    '-v', '--verbose', action='store_true',
    help="Show extra information")
def version(verbose):
    """Prints the current version number"""
    s = (
        "\n{boat}\n\n"
        "-----------------------\n"
        "Caravel {version}\n"
        "-----------------------").format(
        boat=ascii_art.boat, version=config.get('VERSION_STRING'))
    print(s)
    if verbose:
        print("[DB] : " + "{}".format(db.engine))

@manager.option(
    '-t', '--load-test-data', action='store_true',
    help="Load additional test data")
def load_examples(load_test_data):
    """Loads a set of Slices and Dashboards and a supporting dataset """
    print("Loading examples into {}".format(db))

    data.load_css_templates()

    print("Loading energy related dataset")
    data.load_energy()

    print("Loading [World Bank's Health Nutrition and Population Stats]")
    data.load_world_bank_health_n_pop()

    print("Loading [Birth names]")
    data.load_birth_names()

    print("Loading [Random time series data]")
    data.load_random_time_series_data()

    print("Loading [Random long/lat data]")
    data.load_long_lat_data()

    print("Loading [Multiformat time series]")
    data.load_multiformat_time_series_data()

    print("Loading [Misc Charts] dashboard")
    data.load_misc_dashboard()

    if load_test_data:
        print("Loading [Unicode test data]")
        data.load_unicode_test_data()

@manager.command
def refresh_druid():
    """Refresh all druid datasources"""
    session = db.session()
    from caravel import models
    for cluster in session.query(models.DruidCluster).all():
        try:
            cluster.refresh_datasources()
        except Exception as e:
            print(
                "Error while processing cluster '{}'\n{}".format(
                    cluster, str(e)))
            logging.exception(e)
        cluster.metadata_last_refreshed = datetime.now()
        print(
            "Refreshed metadata from cluster "
            "[" + cluster.cluster_name + "]")
    session.commit()

@manager.option(
    '-p', '--prefix', default="",
    help="Sync Table Prefix")
@manager.option(
    '-d', '--database', default=None,
    help="Specifies database (use caravel db name, not real db name)")
def synctable(prefix, database):
    ''' Sync DB Table with Caravel Table'''
    print("")

    if (prefix == "" and database is None) or (database == 'main' and prefix == ""):
        print("If you not set prefix and db name, some system table may be sync to caravel.")
        
        check_status = raw_input("Are you sure do this? (Y/N)").lower().strip()
        if check_status not in ['y', 'yes']:
            print("Exit sync table")
            exit()
            
    if database is None:
        caravel_dbs = db.session.query(caravel.models.Database).all()
    else:
        caravel_dbs = (db.session.query(caravel.models.Database)
                                 .filter_by(database_name=database).all())
    
    if caravel_dbs == []:
        print("Database not exists, please check database name")
        exit()

    existing_tables = []
    for row in db.session.query(caravel.models.SqlaTable).all():
        existing_tables += [(row.database.database_name, row.name)]

    # Get all need insert table
    insert_dict = defaultdict(list)
    for caravel_db in caravel_dbs:
        for table_name in caravel_db.get_sqla_engine().table_names():
            table = (caravel_db.database_name, table_name)

            if (table not in existing_tables) and table_name.startswith(prefix):
                insert_dict[caravel_db].append(table_name)
    
    # Insert to caravel tables
    count_insert = 0
    for caravel_db, tables in insert_dict.items():
        for table_name in tables:
            count_insert += 1

            tbl = caravel.models.SqlaTable(table_name=table_name)
            tbl.description = ""
            tbl.is_featured = False
            tbl.database = caravel_db
            db.session.add(tbl)
            db.session.commit()
            tbl.fetch_metadata()

            print("[{db}] {table} insert success.".format(
                db=caravel_db.database_name, 
                table=table_name
            ))

    print("[{}] Sync table complete.".format(count_insert))

@manager.command
def worker():
    """Starts a Caravel worker for async SQL query execution."""
    # celery -A tasks worker --loglevel=info
    print("Starting SQL Celery worker.")
    if config.get('CELERY_CONFIG'):
        print("Celery broker url: ")
        print(config.get('CELERY_CONFIG').BROKER_URL)

    application = celery.current_app._get_current_object()
    c_worker = celery_worker.worker(app=application)
    options = {
        'broker': config.get('CELERY_CONFIG').BROKER_URL,
        'loglevel': 'INFO',
        'traceback': True,
    }
    c_worker.run(**options)


if __name__ == "__main__":
    manager.run()
