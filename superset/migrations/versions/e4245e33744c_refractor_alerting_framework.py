# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
"""refractor_alerting_framework

Revision ID: e4245e33744c
Revises: f120347acb39
Create Date: 2020-08-14 17:21:14.811918

"""

# revision identifiers, used by Alembic.
revision = "e4245e33744c"
down_revision = "f120347acb39"

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import mysql


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "alert_observers",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=True),
        sa.Column(
            "observer_type", sa.Enum("sql", name="alertobservertype"), nullable=True
        ),
        sa.Column(
            "validation_type",
            sa.Enum("numerical", name="alertvalidationtype"),
            nullable=True,
        ),
        sa.Column("alert_id", sa.Integer(), nullable=False),
        sa.Column("database_id", sa.Integer(), nullable=False),
        sa.Column("sql", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(["alert_id"], ["alerts.id"],),
        sa.ForeignKeyConstraint(["database_id"], ["dbs.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "alert_validators",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=True),
        sa.Column(
            "validator_type",
            sa.Enum("not_null", "deviation", name="alertvalidatortype"),
            nullable=True,
        ),
        sa.Column(
            "validation_type",
            sa.Enum("numerical", name="alertvalidationtype"),
            nullable=True,
        ),
        sa.Column("alert_id", sa.Integer(), nullable=False),
        sa.Column("deviation_difference", sa.Float(), nullable=True),
        sa.Column("deviation_threshold", sa.Integer(), nullable=True),
        sa.Column("range_min", sa.Integer(), nullable=True),
        sa.Column("range_max", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["alert_id"], ["alerts.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "alert_observations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("dttm_ts", sa.DateTime(), nullable=True),
        sa.Column("observer_id", sa.Integer(), nullable=False),
        sa.Column("value", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(["observer_id"], ["alert_observers.id"],),
        sa.PrimaryKeyConstraint("id"),
    )

    op.drop_column("alerts", "sql")
    op.drop_column("alerts", "database_id")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "alerts",
        sa.Column("database_id", mysql.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column("alerts", sa.Column("sql", mysql.TEXT(), nullable=True))

    op.drop_table("alert_observations")
    op.drop_table("alert_validators")
    op.drop_table("alert_observers")
    # ### end Alembic commands ###
