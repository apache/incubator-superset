"use strict";exports.__esModule=!0,exports.default=void 0;var _core=require("@superset-ui/core"),_connection=require("@superset-ui/connection"),_ChartBuildQueryRegistrySingleton=_interopRequireDefault(require("../registries/ChartBuildQueryRegistrySingleton"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}var ChartClient=/*#__PURE__*/function(){function a(a){void 0===a&&(a={}),_defineProperty(this,"client",void 0);var b=a,c=b.client,d=void 0===c?_connection.SupersetClient:c;this.client=d}var b=a.prototype;return b.loadFormData=function c(a,b){/* If sliceId is provided, use it to fetch stored formData from API */if("sliceId"in a){var d=this.client.get(_extends({endpoint:"/api/v1/formData/?slice_id="+a.sliceId},b)).then(function(a){return a.json}).then(function(a){return a.form_data});/*
       * If formData is also specified, override API result
       * with user-specified formData
       */return d.then(function(b){return _extends({},b,a.formData)})}/* If sliceId is not provided, returned formData wrapped in a Promise */return a.formData?Promise.resolve(a.formData):Promise.reject(new Error("At least one of sliceId or formData must be specified"))},b.loadQueryData=function d(a,b){var c=(0,_ChartBuildQueryRegistrySingleton.default)().get(a.viz_type);return c?this.client.post(_extends({endpoint:"/api/v1/query/",postPayload:{query_context:c(a)}},b)).then(function(a){return a.json}):Promise.reject(new Error("Unknown chart type: "+a.viz_type))},b.loadDatasource=function c(a,b){return this.client.get(_extends({endpoint:"/superset/fetch_datasource_metadata?datasourceKey="+a},b)).then(function(a){return a.json})},b.loadAnnotation=function b(a){/* When annotation does not require query */return(0,_core.isDefined)(a.sourceType)?Promise.reject(new Error("This feature is not implemented yet.")):Promise.resolve({});// TODO: Implement
},b.loadAnnotations=function c(a){var b=this;return Array.isArray(a)&&0<a.length?Promise.all(a.map(function(a){return b.loadAnnotation(a)})).then(function(b){return a.reduce(function(a,c,d){var e=a;return e[c.name]=b[d],e},{})}):Promise.resolve({})},b.loadChartData=function c(a){var b=this;return this.loadFormData(a).then(function(a){return Promise.all([b.loadAnnotations(a.annotation_layers),b.loadDatasource(a.datasource),b.loadQueryData(a)]).then(function(b){var c=b[0],d=b[1],e=b[2];return{annotationData:c,datasource:d,formData:a,queryData:e}})})},a}();exports.default=ChartClient;