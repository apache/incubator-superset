import { Plugin } from '@superset-ui/core';
import ChartMetadata from './ChartMetadata';
import ChartProps from './ChartProps';
import { ChartFormData } from '../types/ChartFormData';
import { QueryContext } from '../types/Query';
declare type PromiseOrValue<T> = Promise<T> | T;
declare type PromiseOrValueLoader<T> = () => PromiseOrValue<T> | PromiseOrValue<{
    default: T;
}>;
export declare type BuildQueryFunction<T extends ChartFormData> = (formData: T) => QueryContext;
export declare type TransformPropsFunction = (chartProps: ChartProps) => {
    [key: string]: any;
};
interface ChartPluginConfig<T extends ChartFormData> {
    metadata: ChartMetadata;
    buildQuery?: BuildQueryFunction<T>;
    loadBuildQuery?: PromiseOrValueLoader<BuildQueryFunction<T>>;
    transformProps?: TransformPropsFunction;
    loadTransformProps?: PromiseOrValueLoader<TransformPropsFunction>;
    Chart?: Function;
    loadChart?: PromiseOrValueLoader<Function>;
}
export default class ChartPlugin<T extends ChartFormData = ChartFormData> extends Plugin {
    metadata: ChartMetadata;
    loadBuildQuery?: PromiseOrValueLoader<BuildQueryFunction<T>>;
    loadTransformProps: PromiseOrValueLoader<TransformPropsFunction>;
    loadChart: PromiseOrValueLoader<Function>;
    constructor(config: ChartPluginConfig<T>);
    register(): this;
    configure(config: {
        [key: string]: any;
    }, replace?: boolean): this;
}
export {};
