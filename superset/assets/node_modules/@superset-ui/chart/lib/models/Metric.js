"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LABEL_MAX_LENGTH = 43;
// Note that the values of MetricKeys are lower_snake_case because they're
// used as keys of form data jsons.
var MetricKey;
(function (MetricKey) {
    MetricKey["METRIC"] = "metric";
    MetricKey["METRICS"] = "metrics";
    MetricKey["PERCENT_METRICS"] = "percent_metrics";
    MetricKey["RIGHT_AXIS_METRIC"] = "metric_2";
    MetricKey["SECONDARY_METRIC"] = "secondary_metric";
    MetricKey["X"] = "x";
    MetricKey["Y"] = "y";
    MetricKey["SIZE"] = "size";
})(MetricKey = exports.MetricKey || (exports.MetricKey = {}));
var Aggregate;
(function (Aggregate) {
    Aggregate["AVG"] = "AVG";
    Aggregate["COUNT"] = "COUNT ";
    Aggregate["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    Aggregate["MAX"] = "MAX";
    Aggregate["MIN"] = "MIN";
    Aggregate["SUM"] = "SUM";
})(Aggregate = exports.Aggregate || (exports.Aggregate = {}));
var ExpressionType;
(function (ExpressionType) {
    ExpressionType["SIMPLE"] = "SIMPLE";
    ExpressionType["SQL"] = "SQL";
})(ExpressionType = exports.ExpressionType || (exports.ExpressionType = {}));
class Metrics {
    constructor(formData) {
        this.metrics = Object.keys(MetricKey)
            .map(key => formData[MetricKey[key]])
            .filter(metric => metric)
            .map(metric => {
            if (typeof metric === 'string') {
                return { label: metric };
            }
            // Note we further sanitize the metric label for BigQuery datasources
            // TODO: move this logic to the client once client has more info on the
            // the datasource
            return {
                ...metric,
                label: metric.label || this.getDefaultLabel(metric),
            };
        });
    }
    getMetrics() {
        return this.metrics;
    }
    getLabels() {
        return this.metrics.map(m => m.label);
    }
    getDefaultLabel(metric) {
        let label;
        if (metric.expressionType === ExpressionType.SIMPLE) {
            label = `${metric.aggregate}(${metric.column.columnName})`;
        }
        else {
            label = metric.sqlExpression;
        }
        return label.length <= exports.LABEL_MAX_LENGTH
            ? label
            : `${label.substring(0, exports.LABEL_MAX_LENGTH - 3)}...`;
    }
}
exports.Metrics = Metrics;
