interface PlainObject {
    [key: string]: any;
}
declare type AnnotationData = PlainObject;
declare type CamelCaseDatasource = PlainObject;
declare type SnakeCaseDatasource = PlainObject;
declare type CamelCaseFormData = PlainObject;
declare type SnakeCaseFormData = PlainObject;
declare type QueryData = PlainObject;
declare type Filters = any[];
declare type HandlerFunction = (...args: any[]) => void;
declare type ChartPropsSelector = (c: ChartPropsConfig) => ChartProps;
interface ChartPropsConfig {
    annotationData?: AnnotationData;
    datasource?: SnakeCaseDatasource;
    filters?: Filters;
    formData?: SnakeCaseFormData;
    height?: number;
    onAddFilter?: HandlerFunction;
    onError?: HandlerFunction;
    payload?: QueryData;
    setControlValue?: HandlerFunction;
    setTooltip?: HandlerFunction;
    width?: number;
}
export default class ChartProps {
    static createSelector: () => ChartPropsSelector;
    annotationData: AnnotationData;
    datasource: CamelCaseDatasource;
    rawDatasource: SnakeCaseDatasource;
    filters: Filters;
    formData: CamelCaseFormData;
    rawFormData: SnakeCaseFormData;
    height: number;
    onAddFilter: HandlerFunction;
    onError: HandlerFunction;
    payload: QueryData;
    setControlValue: HandlerFunction;
    setTooltip: HandlerFunction;
    width: number;
    constructor(config?: ChartPropsConfig);
}
export {};
