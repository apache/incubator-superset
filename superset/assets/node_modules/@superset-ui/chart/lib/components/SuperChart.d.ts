import * as React from 'react';
import ChartProps from '../models/ChartProps';
import { LoadableRenderer } from './createLoadableRenderer';
declare type TransformFunction<Input = PlainProps, Output = PlainProps> = (x: Input) => Output;
declare type HandlerFunction = (...args: any[]) => void;
interface LoadingProps {
    error: any;
}
interface PlainProps {
    [key: string]: any;
}
interface LoadedModules {
    Chart: React.Component | {
        default: React.Component;
    };
    transformProps: TransformFunction | {
        default: TransformFunction;
    };
}
interface RenderProps {
    chartProps: ChartProps;
    preTransformProps?: TransformFunction<ChartProps>;
    postTransformProps?: TransformFunction;
}
export interface SuperChartProps {
    id?: string;
    className?: string;
    chartProps?: ChartProps | null;
    chartType: string;
    preTransformProps?: TransformFunction<ChartProps>;
    overrideTransformProps?: TransformFunction;
    postTransformProps?: TransformFunction;
    onRenderSuccess?: HandlerFunction;
    onRenderFailure?: HandlerFunction;
}
export default class SuperChart extends React.PureComponent<SuperChartProps, {}> {
    static defaultProps: {
        id: string;
        className: string;
        preTransformProps: (x: any) => any;
        overrideTransformProps: undefined;
        postTransformProps: (x: any) => any;
        onRenderSuccess(): void;
        onRenderFailure(): void;
    };
    constructor(props: SuperChartProps);
    processChartProps: (input: {
        chartProps: ChartProps;
        preTransformProps?: TransformFunction<ChartProps>;
        transformProps?: TransformFunction;
        postTransformProps?: TransformFunction;
    }) => any;
    createLoadableRenderer: (input: {
        chartType: string;
        overrideTransformProps?: TransformFunction;
    }) => LoadableRenderer<RenderProps, LoadedModules> | (() => null);
    renderChart(loaded: LoadedModules, props: RenderProps): JSX.Element;
    renderLoading(loadingProps: LoadingProps, chartType: string): JSX.Element | null;
    render(): JSX.Element | null;
}
export {};
