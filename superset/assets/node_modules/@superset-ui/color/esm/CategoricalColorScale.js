function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inheritsLoose(a,b){a.prototype=Object.create(b.prototype),a.prototype.constructor=a,a.__proto__=b}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}import{ExtensibleFunction}from"@superset-ui/core";import stringifyAndTrim from"./stringifyAndTrim";var CategoricalColorScale=/*#__PURE__*/function(a){/**
   * Constructor
   * @param {*} colors an array of colors
   * @param {*} parentForcedColors optional parameter that comes from parent
   * (usually CategoricalColorNamespace) and supersede this.forcedColors
   */function b(b,c){var d;return d=a.call(this,function(a){return d.getColor(a)})||this,_defineProperty(_assertThisInitialized(d),"colors",void 0),_defineProperty(_assertThisInitialized(d),"parentForcedColors",void 0),_defineProperty(_assertThisInitialized(d),"forcedColors",void 0),_defineProperty(_assertThisInitialized(d),"seen",void 0),d.colors=b,d.parentForcedColors=c,d.forcedColors={},d.seen={},d}_inheritsLoose(b,a);var c=b.prototype;return c.getColor=function h(a){var b=stringifyAndTrim(a),c=this.parentForcedColors&&this.parentForcedColors[b];if(c)return c;var d=this.forcedColors[b];if(d)return d;var e=this.seen[b],f=this.colors.length;if(void 0!==e)return this.colors[e%f];var g=Object.keys(this.seen).length;return this.seen[b]=g,this.colors[g%f]}/**
   * Enforce specific color for given value
   * @param {*} value value
   * @param {*} forcedColor forcedColor
   */,c.setColor=function c(a,b){return this.forcedColors[stringifyAndTrim(a)]=b,this},b}(ExtensibleFunction);export{CategoricalColorScale as default};