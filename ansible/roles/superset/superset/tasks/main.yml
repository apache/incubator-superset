---

- name: Set superset docker registry
  set_fact:
    superset_docker_registry: '{{ docker_default_registry }}'
  when:
    - site_connectivity == "offline" 
 

- name: Populate offline docker registry with superset images
  docker_image:
    name: '{{ item.name }}'
    tag: '{{ item.tag }}'
    push: yes
    force: yes
    timeout: 6000
    repository: "{{ superset_docker_registry }}/{{ item.name }}"
    load_path: "{{ security_docker_images_root_path }}/{{ item.name }}.tar"
  with_items:
    - '{{ superset_docker_images }}'
  when:
    - site_connectivity == "offline"
    - inventory_hostname == groups['management-nodes'][0]


- name: Create base directories
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: root
    group: root
    mode: 0755
  with_items:
    - "{{ superset_host_k8s_dir }}"
  when:
    - superset_deploy


- name: Create kubernetes templates and copy superset deployment files
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ superset_host_k8s_dir }}/{{ item.file }}"
  with_items:
    - name: superset-deployment
      file: superset-deployment.yaml
      type: Deployment
    - name: superset-node-modules-volume-claim
      file: superset-node-modules-volume-claim.yaml
      type: PersistentVolumeClaim
    - name: superset-persistent-volume
      file: superset-persistent-volume.yaml
      type: PersistentVolume  
    - name: superset-service
      file: superset-service.yaml
      type: Service
  register: superset_deploy_files
  when:
    - superset_deploy


- name: Undeploy superset
  kube:
    name: "{{ item.item.name }}"
    namespace: default
    kubectl: "{{ bin_dir }}/kubectl"
    resource: "{{ item.item.type }}"
    filename: "{{ superset_host_k8s_dir }}/{{ item.item.file }}"
    state: "absent"
    force: "true"
  with_items: "{{ superset_deploy_files.results }}"
  when:
    - superset_deploy
    - superset_reload_pods 


- name: Deploy superset
  kube:
    name: "{{ item.item.name }}"
    namespace: default
    kubectl: "{{ bin_dir }}/kubectl"
    resource: "{{ item.item.type }}"
    filename: "{{ superset_host_k8s_dir }}/{{ item.item.file }}"
    state: "{{ item.changed | ternary('latest','present') }}"
    force: "true"
  with_items: "{{ superset_deploy_files.results }}"
  when:
    - superset_deploy