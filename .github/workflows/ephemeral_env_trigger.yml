name: Ephemeral env trigger

on:
  issue_comment:
    types: [created]

jobs:
  pr_commented:
    name: PR comment
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest

    steps:
    - name: Debug
      run: |
        echo "Comment on PR #${{ github.event.issue.number }} by ${{ github.event.issue.user.login }}, ${{ github.event.comment.author_association }}"
        echo "Comment body: ${{ github.event.comment.body }}"

    - name: Eval comment body
      uses: actions/github-script@v3
      id: eval-body
      with:
        result-encoding: string
        script: |
          const pattern = /^\/testenv/
          return String(pattern.test(context.payload.comment.body))

    - name: Exit on invalid command
      if: ${{ steps.set-result.outputs.result === "false" }}
      run: exit 0

    - name: Limit to committers
      if: ${{ github.event.comment.author_association != 'MEMBER' }}
      run: exit 1

    - uses: actions/github-script@v3
      id: get-pr
      with:
        script: |
          const request = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          }
          core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
          try {
            const result = await github.pulls.get(request)
            return result.data
          } catch (err) {
            core.setFailed(`Request failed with error ${err}`)
          }

    - uses: actions/checkout@v2
      with:
        repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
        ref: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }}

    - name: Build image
      id: build-image
      run: |
        mkdir -p ./build
        echo ${{ github.event.issue.number }} > ./build/PR
        echo ${{ fromJSON(steps.get-pr.outputs.result).head.sha }} > ./build/SHA
        docker build --target ci -t ${{ fromJSON(steps.get-pr.outputs.result).head.sha }} .
        docker save ${{ fromJSON(steps.get-pr.outputs.result).head.sha }} | gzip > ./build/${{ fromJSON(steps.get-pr.outputs.result).head.sha }}.tar.gz

    - uses: actions/upload-artifact@v2
      with:
        name: build
        path: build/
        if-no-files-found: error
