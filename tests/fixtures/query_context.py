# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
from typing import Any, Dict, List, Optional


def get_query_object() -> Dict[str, Any]:
    return {
        "extras": {"where": "", "time_range_endpoints": ["INCLUSIVE", "EXCLUSIVE"],},
        "granularity": "ds",
        "groupby": ["name"],
        "is_timeseries": False,
        "metrics": [{"label": "sum__num"}],
        "order_desc": True,
        "orderby": [],
        "row_limit": 100,
        "time_range": "100 years ago : now",
        "timeseries_limit": 0,
        "timeseries_limit_metric": None,
        "filters": [{"col": "gender", "op": "==", "val": "boy"}],
        "having": "",
        "having_filters": [],
        "where": "",
    }


def get_postprocessing_operation() -> List[Dict[str, Any]]:
    return [
        {
            "operation": "aggregate",
            "options": {
                "groupby": ["state"],
                "aggregates": {
                    "q1": {
                        "operator": "percentile",
                        "column": "sum__num",
                        "options": {"q": 25},
                    },
                    "median": {"operator": "median", "column": "sum__num",},
                },
            },
        },
        {"operation": "sort", "options": {"columns": {"q1": False, "state": True},},},
    ]


def get_query_context(
    datasource_id: int,
    datasource_type: str,
    queries: Optional[List[Dict[str, Any]]] = None,
) -> Dict[str, Any]:
    """
    Create a request payload for retrieving a QueryContext object via the
    `api/v1/chart/data` endpoint. By default returns a payload corresponding to one
    generated by the "Boy Name Cloud" chart in the examples.

    :param datasource_id: id of datasource to query.
    :param datasource_type: type of datasource to query.
    :param queries: query objects
    :return: Request payload
    """
    queries = queries or [get_query_object()]
    return {
        "datasource": {"id": datasource_id, "type": datasource_type},
        "queries": queries,
    }
